// Prisma schema for the passport table
// File: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions = [citext]
}

// NextAuth.js v5 models for authentication
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  // Extended fields for storing structured session data
  chatHistory  Json?    @map("chat_history")      // Array of ChatMessage
  processedFiles Json?  @map("processed_files")   // Array of ProcessedFile
  fileSearchSignature String? @map("file_search_signature") // File signature for cache validation
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Document {
  id         Int      @id @default(autoincrement())
  name       String   @unique @db.VarChar(128)
  size       Int
  extension  String   @db.VarChar(16)
  fileType   String   @db.VarChar(32) // e.g. image, document, other
  mimeType   String   @db.VarChar(64)
  data       Bytes
  rawOcrText String?  @db.Text // Text extracted via OCR
  rawLlmText String?  @db.Text // Text extracted via LLM
  category   String?  @db.VarChar(64)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  passport   Passport?
}

model Passport {
  id                      Int      @id @default(autoincrement())
  passport_number         String   @unique @db.VarChar(32)
  surname                 String   @db.Citext
  given_names             String   @db.Citext
  nationality             String   @db.VarChar(64)
  date_of_birth           DateTime
  sex                     String   @db.Char(1)
  place_of_birth          String   @db.VarChar(128)
  date_of_issue           DateTime
  date_of_expiry          DateTime
  issuing_authority       String   @db.VarChar(128)
  holder_signature_present Boolean
  residence               String?  @db.VarChar(128)
  height_cm               Int?
  eye_color               String?  @db.VarChar(32)
  type                    String   @db.VarChar(64)
  documentId              Int?     @unique
  document                Document? @relation(fields: [documentId], references: [id])
}
