# ──────────── Next.js and App Environment Variables ────────────
NEXT_PWA_ENABLED="true"
AUTH_SECRET="your-auth-secret-here"
NEXTAUTH_SECRET="arandomly-generated-secret"
NEXTAUTH_URL="https://your-ngrok-url.example.com"
NEXT_PUBLIC_BACKEND_URL="https://your-backend-url.example.com"
NEXT_PUBLIC_WS_URL="wss://your-ws-url.example.com"
NEXT_PUBLIC_DEBUG="false"
OPENAI_API_KEY="your-openai-api-key-here"
NGROK_TEST_URL="https://your-ngrok-url.example.com"
# Allowed Dev Origins (mandatory for CORS, see file next.config.ts)
ALLOWED_DEV_ORIGIN_1="https://your-dev-origin-1.example.com"
ALLOWED_DEV_ORIGIN_2="https://your-dev-origin-2.example.com"
ALLOWED_DEV_ORIGIN_3="https://your-dev-origin-3.example.com"
# ──────────── Application Settings ────────────

# Application environment: "development" or "production"
NODE_ENV="development"

# Friendly name for your app, used in UIs or logs
APP_NAME="AI Assistant"
# App URL (for deployment)
APP_URL="https://supercoolaiassistant.com"



# ──────────── NextAuth.js Configuration ────────────

# Secret used by NextAuth.js to encrypt session tokens.
# Generate with a secure random generator, e.g.: openssl rand -base64 32
NEXTAUTH_SECRET="fjdfjsfsdjfdsigjsdfg98w5tuw45ijtnklngeklrgjioepguw98r3uyrhpgu"

# Public URL for your auth callbacks. For local dev, use an ngrok address:
#   ngrok http 3000
# Then:
#   NEXTAUTH_URL="https://<your-ngrok-id>.ngrok.io"
NEXTAUTH_URL="https://abcf-430-264-144-395.ngrok-free.app"


# ──────────── Google OAuth Configuration ────────────

# 1. In Google Cloud Console, create a new project (or select existing).
# 2. Under "APIs & Services" → "OAuth consent screen", configure your app name, scopes, and test users.
# 3. Under "Credentials", click "Create Credentials" → "OAuth client ID".
#    - Application type: Web application
#    - Authorized redirect URIs: <NEXTAUTH_URL>/api/auth/callback/google
# 4. Copy the generated Client ID & Secret below:
GOOGLE_CLIENT_ID="1234567890-sajdchsdcjsdnclkjkrfaskjfkldfskafsadf6.apps.googleusercontent.com"
GOOGLE_CLIENT_SECRET="STWLFV-QLDdnjcansdcascuihaef87"


# ──────────── OpenAI Configuration ────────────

# API key for OpenAI requests. Keep this secret.
OPENAI_API_KEY="your-openai-api-key-here"

# Logging level: "debug", "info", "warn", "error"
OPENAI_LOG="debug"

# Default models for file search and general completions
OPENAI_DEFAULT_FILE_SEARCH_MODEL="gpt-5-mini"
OPENAI_DEFAULT_MODEL="gpt-5-mini"

# Fallbacks (can mirror the OPENAI_DEFAULT_* settings)
DEFAULT_FILE_SEARCH_MODEL="gpt-5-mini"
DEFAULT_CATEGORIZATION_MODEL="gpt-5-mini"


# ──────────── OpenRouter Configuration ────────────

# API key for OpenRouter (alternative to OpenAI)
OPENROUTER_API_KEY="your-openrouter-api-key-here"
OPENROUTER_DEFAULT_MODEL="google/gemini-2.0-flash-exp:free"


# ──────────── Calendar Authentication ────────────

# Choose "service-account" to use a Google Service Account
# (requires creating a JSON key and sharing calendar permissions beforehand).
# OR "oauth" to let each user grant access via OAuth.
CALENDAR_AUTH_MODE="oauth"


# ──────────── Time & Localization ────────────

# Default timezone for scheduling tasks & events
TIMEZONE="Asia/Makassar"
# Offset from UTC, useful if library needs it explicitly
TIMEZONE_OFFSET="+08:00"


# ──────────── File Upload Limits ────────────

# Max upload size in bytes (4 MB)
MAX_FILE_SIZE="4194304"
# Directory where uploaded files are stored
FILE_UPLOAD_DIR="tmp_data"
# Max width (px) to resize converted images for OCR/vision
MAX_CONVERTED_IMAGE_WIDTH="1600"


# ──────────── Database Configuration ────────────

DB_HOST="localhost"
DB_PORT="5432"
DB_NAME="calendar_assistant"
DB_USER="postgreadmin"
DB_PASS="fR14Pk!fe^11"

# Full Prisma/Postgres connection string. In production, you might point to a socket or file path.
DATABASE_URL="postgresql://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}?schema=public"


# ──────────── Email (Gmail) Configuration ────────────

# For sending emails via Gmail SMTP. You may need to:
# 1. Enable "Less secure app access" or create an App Password (if 2FA is on).
# 2. Update the credentials below accordingly.
GMAIL_USERNAME="example@gmail.com"
# To obtain a Google application password for Gmail:
# 1. Enable 2-Step Verification on your Google account.
# 2. Go to https://myaccount.google.com/security.
# 3. Under "Signing in to Google", select "App passwords".
# 4. Generate a password for "Mail" and "Other (Custom name)".
# 5. Use the generated password as GMAIL_PASSWORD below.
GMAIL_PASSWORD="example-password"

# GOOGLE_CLIENT_ID: The OAuth 2.0 Client ID for your Google application.
#   - Obtain this value from the Google Cloud Console under APIs & Services > Credentials.
#   - Used for authenticating users via Google Sign-In.

# GOOGLE_CLIENT_SECRET: The OAuth 2.0 Client Secret for your Google application.
#   - Obtain this value from the Google Cloud Console under APIs & Services > Credentials.
#   - Keep this value secure and do not expose it publicly.
GOOGLE_CLIENT_ID="your-google-client-id-here"
GOOGLE_CLIENT_SECRET="your-google-client-secret-here"

# ──────────── Development Overrides ────────────

# If you want to bypass Google OAuth and use test accounts locally (ONLY for development and local testing):
BYPASS_GOOGLE_AUTH="false"
# If you want to reset the database on startup (use with caution, will delete all data):
RESET_DB="false"
