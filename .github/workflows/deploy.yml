name: Deploy taskforge-ai to VPS using SSH and GitHub Actions

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    concurrency:
      group: deploy-taskforge-ai
      cancel-in-progress: true
    env:
      DOCKER_BUILDKIT: 1

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          timeout: 30m
          command_timeout: 30m
          script: |
            set -e

            echo "🚀  Starting deployment …"
            REPO_DIR="$HOME/.docker/taskforge-ai"
            echo "📁  Repository directory: $REPO_DIR"

            if [ ! -d "$REPO_DIR" ]; then
              echo "❌  Repository directory does not exist, aborting."
              exit 1
            fi

            cd "$REPO_DIR"
            echo "📂  Working directory: $(pwd)"

            echo "🔗  Ensuring correct Git remote …"
            git remote set-url origin git@github.com-deploy-taskforge-ai:iltoga/taskforge-ai.git

            OLD_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo none)
            echo "📊  Current commit: $OLD_COMMIT"

            echo "📥  Fetching latest changes …"
            git fetch --all

            echo "🔄  Switching to main branch …"
            git checkout main

            echo "🐳  Ensuring no Docker containers are interfering..."
            docker compose down --remove-orphans || echo "⚠️  No containers to stop"

            echo "🧹  Resetting local state …"
            git reset --hard origin/main

            # Safely clean only untracked files that won't interfere with operations
            echo "🧹  Cleaning safe untracked files..."
            git clean -f || echo "⚠️  Some files couldn't be cleaned, continuing..."

            echo "⬇️  Pulling latest commits …"
            git pull origin main

            NEW_COMMIT=$(git rev-parse HEAD)
            echo "📊  New commit: $NEW_COMMIT"

            echo "🔍  Detecting package-file changes …"
            PACKAGE_CHANGED=false
            if [ "$OLD_COMMIT" != none ] && [ "$OLD_COMMIT" != "$NEW_COMMIT" ]; then
              if git diff --name-only $OLD_COMMIT $NEW_COMMIT | grep -E '(package\.json|package-lock\.json)' >/dev/null; then
                PACKAGE_CHANGED=true
                echo "📦  package.json changed — full dependency rebuild needed."
              else
                echo "📦  package.json unchanged — cached dependencies will be reused."
              fi
            fi

            echo "⚙️  Exporting environment variables from .env …"
            if [ -f .env ]; then
              set -a
              source .env
              set +a
              echo "✅  .env variables loaded."
            else
              echo "❌  .env not found, aborting."
              exit 1
            fi

            export GIT_COMMIT_SHA="$NEW_COMMIT"
            export DOCKER_BUILDKIT=1
            export COMPOSE_DOCKER_CLI_BUILD=1

            echo "🏗️  Building Docker images …"
            if [ "$PACKAGE_CHANGED" = false ] && [ "$OLD_COMMIT" != none ]; then
              echo "⚡  Fast rebuild with cache."
              docker compose build db
              docker compose build \
                --build-arg GIT_COMMIT_SHA="$GIT_COMMIT_SHA" \
                taskforge-ai
            else
              echo "🔄  Full rebuild."
              if [ "$PACKAGE_CHANGED" = true ]; then
                echo "🧹  Pruning old dependency layers …"
                docker image prune -f --filter "label=stage=deps" || true
              fi
              docker compose build db
              docker compose build \
                --build-arg GIT_COMMIT_SHA="$GIT_COMMIT_SHA" \
                --no-cache \
                taskforge-ai
            fi

            echo "⏸️  Stopping old application container …"
            docker compose stop taskforge-ai || true

            echo "🗄️  Starting (or ensuring) database container …"
            docker compose up -d db

            echo "⏳  Waiting for database to accept connections …"
            TIMEOUT=60
            while [ $TIMEOUT -gt 0 ]; do
              if docker compose exec -T db pg_isready -U "$DB_USER" -d "$DB_NAME" >/dev/null 2>&1; then
                echo "✅  Database is ready."
                break
              fi
              echo "⏳  Still waiting … ($TIMEOUT s left)"
              sleep 2
              TIMEOUT=$((TIMEOUT-2))
            done
            if [ $TIMEOUT -le 0 ]; then
              echo "❌  Database failed to start in time."
              docker compose logs db
              exit 1
            fi

            echo "🗑️  Removing old app container (if any) …"
            docker compose rm -f taskforge-ai || true

            echo "🚀  Starting new application container …"
            docker compose up -d --remove-orphans taskforge-ai

            echo "🔍  Verifying container status …"
            sleep 10
            if docker compose ps taskforge-ai | grep -q "Up"; then
              echo "✅  taskforge-ai container is up."
            else
              echo "❌  taskforge-ai container failed to start."
              docker compose logs taskforge-ai
              exit 1
            fi

            echo "🏥  Running health check on http://localhost:3000 …"
            sleep 10
            if curl -f http://localhost:3000 >/dev/null 2>&1; then
              echo "✅  Health check passed."
            else
              echo "⚠️  Health check failed, but container is running."
            fi

            echo "🧹  Cleaning up unused containers & dangling images …"
            docker container prune -f
            docker image prune -f --filter "dangling=true"

            echo "📊  Final container status:"
            docker compose ps

            echo "🎉  Deployment complete!"
